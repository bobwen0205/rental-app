name: Deploy Node Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -t b0bwen/rental-app-server:latest \
            ./server

      - name: Push Docker Image
        run: docker push b0bwen/rental-app-server:latest

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Pull Docker Image
        run: docker pull b0bwen/rental-app-server:latest

      - name: Stop and Remove Old Container
        run: |
          docker stop rental-app-server-container || true
          docker rm rental-app-server-container || true

      - name: Create .env File
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env

      - name: Run New Container
        run: |
          docker run -d \
            --env-file .env \
            -p 4001:4000 \
            --name rental-app-server-container \
            b0bwen/rental-app-server:latest

      - name: Wait for Container Health
        run: |
          for i in {1..10}; do
            if curl -s --fail http://localhost:4001/health; then
              echo "Server is healthy!"
              break
            fi
            echo "Waiting for server to be ready..."
            sleep 3
          done

      - name: Run Prisma Migrations
        run: docker exec rental-app-server-container npx prisma migrate deploy
